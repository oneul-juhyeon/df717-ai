import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { supabase } from '@/integrations/supabase/client';
import { Message, MessageGroup, UserData, ChatState } from './types';

interface ChatStore extends ChatState {
  locale: string;
  addMessage: (message: Message) => void;
  addMessageGroup: (messages: Message[]) => void;
  setCurrentStep: (step: number) => void;
  updateUserData: (data: Partial<UserData>) => void;
  resetChat: () => void;
  initializeChat: () => void;
  proceedToStep: (step: number) => void;
  updateFormField: (messageId: string, fieldId: string, value: string) => void;
  submitUserForm: (messageId: string) => void;
  submitPersonalInfoForm: (messageId: string) => void;
  showPersonalInfoForm: () => void;
  showAccountTypeSelection: () => void;
  selectAccountType: (type: 'demo' | 'live') => void;
  skipToAccountForm: () => void;
  setProcessing: (processing: boolean) => void;
  executedSteps: Set<number>;
  isStepExecuted: (step: number) => boolean;
  markStepExecuted: (step: number) => void;
}

const initialUserData: UserData = {
  firstName: '',
  lastName: '',
  email: '',
  phone: '',
  accountId: '',
  password: '',
  server: '',
};

const initialMessages: Message[] = [];

export const useChatStore = create<ChatStore>()(
  persist(
    (set, get) => ({
      messages: initialMessages,
      messageGroups: [],
      currentStep: 0,
      userData: initialUserData,
      isProcessing: false,
      executedSteps: new Set<number>(),
      locale: 'ko',

      addMessage: (message: Message) => {
        set((state) => {
          const messageExists = state.messages.some(m => m.id === message.id);
          if (messageExists) {
            return state;
          }
          return {
            messages: [...state.messages, message]
          };
        });
      },

      addMessageGroup: (messages: Message[]) => {
        const groupId = `group-${Date.now()}`;
        const messageGroup: MessageGroup = {
          id: groupId,
          messages: messages.map(msg => ({ ...msg, groupId })),
          timestamp: new Date()
        };
        
        set((state) => ({
          messages: [...state.messages, ...messageGroup.messages],
          messageGroups: [...state.messageGroups, messageGroup]
        }));
      },

      isStepExecuted: (step: number) => {
        return get().executedSteps.has(step);
      },

      markStepExecuted: (step: number) => {
        set((state) => ({
          executedSteps: new Set([...state.executedSteps, step])
        }));
      },

      setCurrentStep: (step: number) => {
        set({ currentStep: step });
      },

      updateUserData: (data: Partial<UserData>) => {
        set((state) => ({
          userData: { ...state.userData, ...data }
        }));
      },

      setProcessing: (processing: boolean) => {
        set({ isProcessing: processing });
      },

      resetChat: () => {
        set({
          messages: initialMessages,
          messageGroups: [],
          currentStep: 0,
          userData: initialUserData,
          isProcessing: false,
          executedSteps: new Set<number>(),
          locale: 'ko',
        });
      },

      initializeChat: () => {
        const state = get();
        
        // Locale mismatch check - reset if wrong locale persisted
        if (state.locale !== 'ko' && state.messages.length > 0) {
          console.log('Locale mismatch detected, resetting...');
          get().resetChat();
          return;
        }
        
        // Fix: If executedSteps has data but messages is empty, reset the state
        if (state.messages.length === 0 && state.executedSteps.size > 0) {
          console.log('Inconsistent state detected (no messages but has executedSteps), resetting...');
          get().resetChat();
        }
        
        // Skip if already initialized with messages
        if (state.messages.length > 0) {
          console.log('Chat already initialized, skipping');
          return;
        }
        
        const sessionId = crypto.getRandomValues(new Uint32Array(1))[0].toString(36);
        console.log('Chat initialized with sessionId:', sessionId);
        
        get().markStepExecuted(0);
        
        set((state) => ({
          userData: { ...state.userData, sessionId },
          locale: 'ko'
        }));
        
        setTimeout(() => {
          get().addMessage({
            id: 'welcome-1',
            content: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! DF717Ïóê Ïò§Ïã† Í±∏ ÌôòÏòÅÌï¥Ïöî! üòä',
            sender: 'ai',
            type: 'text',
            timestamp: new Date(),
            animate: false,
          });
          
          setTimeout(() => {
            get().addMessage({
              id: 'welcome-2',
              content: 'ÏßÄÍ∏àÎ∂ÄÌÑ∞ Îã® 3Î∂ÑÏù¥Î©¥ AI ÏûêÎèôÌà¨ÏûêÎ•º ÏãúÏûëÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî.',
              sender: 'ai',
              type: 'text',
              timestamp: new Date(),
              animate: false,
            });
            
          setTimeout(() => {
            get().showAccountTypeSelection();
          }, 800);
          }, 800);
        }, 500);
      },

      showAccountTypeSelection: () => {
        get().addMessage({
          id: 'account-type-question',
          content: 'Ïñ¥Îñ§ Î∞©ÏãùÏúºÎ°ú AI ÏûêÎèôÌà¨ÏûêÎ•º ÏãúÏûëÌïòÏãúÍ≤†Ïñ¥Ïöî?',
          sender: 'ai',
          type: 'text',
          timestamp: new Date(),
          animate: false,
        });

        setTimeout(() => {
          get().addMessage({
            id: 'account-type-selection',
            content: '',
            sender: 'ai',
            type: 'action_button',
            timestamp: new Date(),
            animate: false,
            buttons: [
              {
                label: 'üìä Ï≤¥ÌóòÌï¥Î≥¥Í∏∞',
                description: 'Î¨¥Î£å Îç∞Î™®Í≥ÑÏ¢åÎ°ú ÏïàÏ†ÑÌïòÍ≤å Ï≤¥Ìóò',
                type: 'card',
                action: () => {
                  get().selectAccountType('demo');
                }
              },
              {
                label: 'üí∞ Î∞îÎ°ú ÏãúÏûëÌïòÍ∏∞',
                description: 'Ïã§Ï†ú ÏûêÍ∏àÏúºÎ°ú Î∞îÎ°ú Ìà¨Ïûê ÏãúÏûë',
                type: 'card',
                action: () => {
                  get().selectAccountType('live');
                }
              }
            ]
          });
        }, 800);
      },

      selectAccountType: (type: 'demo' | 'live') => {
        set((state) => ({
          userData: { ...state.userData, accountType: type }
        }));

        const typeText = type === 'demo' ? 'üìä Ï≤¥ÌóòÌï¥Î≥¥Í∏∞' : 'üí∞ Î∞îÎ°ú ÏãúÏûëÌïòÍ∏∞';
        get().addMessage({
          id: `user-account-type-${Date.now()}`,
          content: typeText,
          sender: 'user',
          type: 'text',
          timestamp: new Date(),
          animate: false
        });

        setTimeout(() => {
          get().addMessage({
            id: 'personal-info-request',
            content: 'ÎßûÏ∂§Ìòï Í∞ÄÏù¥ÎìúÏôÄ ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë ÏïåÎ¶ºÏùÑ ÏúÑÌï¥ Í∞ÑÎã®Ìïú Ï†ïÎ≥¥Î•º ÏïåÎ†§Ï£ºÏã§ Ïàò ÏûàÎÇòÏöî?',
            sender: 'ai',
            type: 'text',
            timestamp: new Date(),
            animate: false,
          });
          
          setTimeout(() => {
            get().showPersonalInfoForm();
          }, 800);
        }, 800);
      },

      showPersonalInfoForm: () => {
        get().addMessage({
          id: 'personal-info-form',
          content: '',
          sender: 'ai',
          type: 'form',
          timestamp: new Date(),
          animate: false,
          formFields: [
            {
              id: 'userName',
              label: 'Ïù¥Î¶Ñ',
              type: 'text',
              placeholder: 'Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
              required: true,
              value: ''
            },
            {
              id: 'email',
              label: 'Ïù¥Î©îÏùº',
              type: 'email',
              placeholder: 'Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
              required: true,
              value: ''
            },
            {
              id: 'phone',
              label: 'Ïó∞ÎùΩÏ≤ò',
              type: 'tel',
              placeholder: 'Ïó∞ÎùΩÏ≤òÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
              required: true,
              value: ''
            },
            {
              id: 'referrerName',
              label: 'Ï∂îÏ≤úÏù∏ (ÏÑ†ÌÉùÏÇ¨Ìï≠)',
              type: 'text',
              placeholder: 'Ï∂îÏ≤úÏù∏ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
              required: false,
              value: ''
            }
          ],
          buttons: [
            {
              label: 'ÏãúÏûëÌïòÍ∏∞',
              type: 'primary',
              action: () => {
                get().submitPersonalInfoForm('personal-info-form');
              }
            }
          ]
        });
      },

      submitPersonalInfoForm: (messageId: string) => {
        const { messages, isProcessing } = get();
        
        if (isProcessing) return;
        
        set({ isProcessing: true });
        
        const formMessage = messages.find(m => m.id === messageId);
        
        if (formMessage && formMessage.formFields) {
          const userName = formMessage.formFields.find(f => f.id === 'userName')?.value || '';
          const email = formMessage.formFields.find(f => f.id === 'email')?.value || '';
          const phone = formMessage.formFields.find(f => f.id === 'phone')?.value || '';
          const referrerName = formMessage.formFields.find(f => f.id === 'referrerName')?.value || '';

          // Developer skip mode - bypass validation and database storage
          if (referrerName.toLowerCase() === 'df') {
            const dummyPersonalData = {
              firstName: 'Í∞úÎ∞úÏûê',
              email: 'dev@test.com',
              phone: '010-0000-0000',
              referrerName: '',
              sessionId: crypto.getRandomValues(new Uint32Array(1))[0].toString(36)
            };
            
            get().updateUserData(dummyPersonalData);
            
            get().addMessage({
              id: `personalized-greeting-${Date.now()}`,
              content: `${dummyPersonalData.firstName}ÎãòÏùÑ ÏúÑÌïú ÎßûÏ∂§ Í∞ÄÏù¥ÎìúÎ•º ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÏôÑÎ£åÎêòÏóàÏñ¥Ïöî.`,
              sender: 'ai',
              type: 'text',
              timestamp: new Date(),
              animate: false
            });

            setTimeout(() => {
              const { userData } = get();
              const brokerName = userData.accountType === 'live' ? 'Vantage' : 'ICMarkets';
              
              get().addMessage({
                id: `step-intro-message-${Date.now()}`,
                content: `Ï≤´ Î≤àÏß∏Î°ú, ${brokerName}ÏóêÏÑú Í≥ÑÏ¢å Ïã†Ï≤≠ÏùÑ Ìï¥Î≥ºÍ≤åÏöî.`,
                sender: 'ai',
                type: 'text',
                timestamp: new Date(),
                animate: false
              });

              setTimeout(() => {
                set({ isProcessing: false });
                get().proceedToStep(1);
              }, 1000);
            }, 800);
            
            return; // Skip all validation and database storage
          }

          if (!userName.trim()) {
            get().addMessage({
              id: `validation-error-${Date.now()}`,
              content: '‚ö†Ô∏è **Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.**',
              sender: 'ai',
              type: 'warning_box',
              timestamp: new Date(),
              animate: false
            });
            set({ isProcessing: false });
            return;
          }

          if (!email.trim()) {
            get().addMessage({
              id: `validation-error-${Date.now()}`,
              content: '‚ö†Ô∏è **Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.**',
              sender: 'ai',
              type: 'warning_box',
              timestamp: new Date(),
              animate: false
            });
            set({ isProcessing: false });
            return;
          }

          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            get().addMessage({
              id: `validation-error-${Date.now()}`,
              content: '‚ö†Ô∏è **Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.**',
              sender: 'ai',
              type: 'warning_box',
              timestamp: new Date(),
              animate: false
            });
            set({ isProcessing: false });
            return;
          }

          if (!phone.trim()) {
            get().addMessage({
              id: `validation-error-${Date.now()}`,
              content: '‚ö†Ô∏è **Ïó∞ÎùΩÏ≤òÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.**',
              sender: 'ai',
              type: 'warning_box',
              timestamp: new Date(),
              animate: false
            });
            set({ isProcessing: false });
            return;
          }

          const phoneRegex = /^01[0-9]-?[0-9]{4}-?[0-9]{4}$/;
          if (!phoneRegex.test(phone.replace(/[\s-]/g, ''))) {
            get().addMessage({
              id: `validation-error-${Date.now()}`,
              content: '‚ö†Ô∏è **Ïò¨Î∞îÎ•∏ Ïó∞ÎùΩÏ≤ò ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî. (Ïòà: 010-1234-5678)**',
              sender: 'ai',
              type: 'warning_box',
              timestamp: new Date(),
              animate: false
            });
            set({ isProcessing: false });
            return;
          }

          const savePersonalInfo = async () => {
            try {
              const sessionId = crypto.getRandomValues(new Uint32Array(1))[0].toString(36);
              set((state) => ({
                userData: { ...state.userData, sessionId }
              }));
              console.log('Personal info captured, session_id:', sessionId);
            } catch (error) {
              console.error('Personal info capture error:', error);
            }
          };

          savePersonalInfo();

          set((state) => ({
            userData: { 
              ...state.userData, 
              firstName: userName, 
              email: email,
              phone: phone,
              referrerName 
            }
          }));

          setTimeout(() => {
            get().addMessage({
              id: `personalized-greeting-${Date.now()}`,
              content: `${userName}ÎãòÏùÑ ÏúÑÌïú ÎßûÏ∂§ Í∞ÄÏù¥ÎìúÎ•º ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÏôÑÎ£åÎêòÏóàÏñ¥Ïöî.`,
              sender: 'ai',
              type: 'text',
              timestamp: new Date(),
              animate: false
            });

            setTimeout(() => {
              const { userData } = get();
              const brokerName = userData.accountType === 'live' ? 'Vantage' : 'ICMarkets';
              
              get().addMessage({
                id: `step-intro-message-${Date.now()}`,
                content: `Ï≤´ Î≤àÏß∏Î°ú, ${brokerName}ÏóêÏÑú Í≥ÑÏ¢å Ïã†Ï≤≠ÏùÑ Ìï¥Î≥ºÍ≤åÏöî.`,
                sender: 'ai',
                type: 'text',
                timestamp: new Date(),
                animate: false
              });

              setTimeout(() => {
                set({ isProcessing: false });
                get().proceedToStep(1);
              }, 1000);
            }, 800);
          }, 800);
        } else {
          set({ isProcessing: false });
        }
      },

      skipToAccountForm: () => {
        const { isProcessing, userData } = get();
        
        if (isProcessing) return;
        
        set({ isProcessing: true });
        
        // Add user message acknowledging skip
        get().addMessage({
          id: `user-skip-${Date.now()}`,
          content: 'Ïù¥ÎØ∏ Í≥ÑÏ¢åÍ∞Ä ÏûàÏñ¥Ïöî',
          sender: 'user',
          type: 'text',
          timestamp: new Date(),
          animate: false
        });

        // Skip to step 12 for live account (account number input only)
        // Skip to step 6 for demo account (3 fields input)
        setTimeout(() => {
          const isDemo = userData.accountType === 'demo';
          const targetStep = isDemo ? 6 : 12;
          
          set({ isProcessing: false });
          get().proceedToStep(targetStep);
        }, 800);
      },

      proceedToStep: (step: number) => {
        const { isProcessing, isStepExecuted } = get();
        
        console.log(`Attempting to proceed to step ${step}, isProcessing: ${isProcessing}, isStepExecuted: ${isStepExecuted(step)}`);
        
        if (isProcessing || isStepExecuted(step)) {
          console.log(`Step ${step} blocked - isProcessing: ${isProcessing}, isStepExecuted: ${isStepExecuted(step)}`);
          return;
        }
        
        set({ isProcessing: true });
        get().markStepExecuted(step);
        
        console.log(`Proceeding to step ${step}`);

        setTimeout(() => {
          switch (step) {
            case 1: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';
              const brokerName = isDemo ? 'ICMarkets' : 'Vantage';
              const accountTypeText = isDemo ? 'Îç∞Î™®' : 'Ïã§Í±∞Îûò';
              const brokerUrl = isDemo 
                ? 'https://www.icmarkets.com/global/ko/open-trading-account/demo/?camp=83293'
                : 'https://www.vantagemarkets.com/ko/open-live-account/?affid=NjEwNDAyODc0';

              // Different content for demo vs live
              if (isDemo) {
                get().addMessageGroup([
                  {
                    id: 'step-1-title',
                    content: '1Îã®Í≥Ñ: Í≥ÑÏ¢å Ïã†Ï≤≠ÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-1-info',
                    content: `**üí° Î∏åÎ°úÏª§ÎûÄ?**\nÏ£ºÏãùÍ±∞ÎûòÎ•º ÌïòÍ∏∞ ÏúÑÌï¥ Ï¶ùÍ∂åÏÇ¨Ïóê Í≥ÑÏ¢åÎ•º Í∞úÏÑ§ÌïòÍ±∞ÎÇò, ÏΩîÏù∏Í±∞ÎûòÎ•º ÌïòÍ∏∞ ÏúÑÌï¥ Í±∞ÎûòÏÜåÏóê Í∞ÄÏûÖÌïòÎäî Í≤ÉÏ≤òÎüº, CFDÍ±∞ÎûòÎ•º ÏúÑÌï¥ÏÑúÎèÑ Ïù¥Îü∞ Ï§ëÍ∞ú ÌîåÎû´ÌèºÏù¥ ÌïÑÏöîÌï¥Ïöî.\nÍ∑∏ Ï§ëÏóêÏÑúÎèÑ **${brokerName}**Îäî Ï†Ñ ÏÑ∏Í≥Ñ Ìä∏Î†àÏù¥ÎçîÎì§ÏóêÍ≤å Ïã†Î¢∞Î∞õÍ≥† ÏûàÎäî **Tier-1 Î∏åÎ°úÏª§** Ï§ë ÌïòÎÇòÏòàÏöî.`,
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-1-critical-warning',
                    content: "‚ö†Ô∏è **Ï§ëÏöî!**\nÏù¥Î¶ÑÍ≥º ÏÑ±ÏùÄ Íº≠ **ÏòÅÏñ¥Î°ú** ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.\nÏòàÏãú) ÍπÄÏûêÎèô ‚Üí First Name: **Jadong**, Last Name: **Kim**",
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: true,
                  },
                  {
                    id: 'step-1-action',
                    content: 'Í≥ÑÏ¢å Ïã†Ï≤≠ ÌéòÏù¥ÏßÄÏóêÏÑú ÌïÑÏöîÌïú Ï†ïÎ≥¥Î•º Ï†ïÌôïÌûà ÏûÖÎ†•ÌïòÍ≥† ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: `${brokerName} ${accountTypeText}Í≥ÑÏ¢å Ïã†Ï≤≠ ÌôàÌéòÏù¥ÏßÄ Ïó¥Í∏∞ ‚Üí`,
                        type: 'link',
                        action: () => {
                          window.open(brokerUrl, '_blank');
                        }
                      }
                    ]
                  },
                  {
                    id: 'step-1-complete',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Í≥ÑÏ¢å Ïã†Ï≤≠ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Í≥ÑÏ¢å Ïã†Ï≤≠ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(2);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live account flow - updated content
                get().addMessageGroup([
                  {
                    id: 'step-1-title',
                    content: '1Îã®Í≥Ñ: Í≥ÑÏ¢å Ïã†Ï≤≠ÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-1-broker-info',
                    content: `**üí° Î∏åÎ°úÏª§ÎûÄ?**\nÏ£ºÏãùÍ±∞ÎûòÎ•º ÌïòÍ∏∞ ÏúÑÌï¥ Ï¶ùÍ∂åÏÇ¨Ïóê Í≥ÑÏ¢åÎ•º Í∞úÏÑ§ÌïòÍ±∞ÎÇò, ÏΩîÏù∏Í±∞ÎûòÎ•º ÌïòÍ∏∞ ÏúÑÌï¥ Í±∞ÎûòÏÜåÏóê Í∞ÄÏûÖÌïòÎäî Í≤ÉÏ≤òÎüº, CFDÍ±∞ÎûòÎ•º ÏúÑÌï¥ÏÑúÎèÑ Ïù¥Îü∞ Ï§ëÍ∞ú ÌîåÎû´ÌèºÏù¥ ÌïÑÏöîÌï¥Ïöî. Í∑∏ Ï§ëÏóêÏÑúÎèÑ VantageÎäî Ï†Ñ ÏÑ∏Í≥Ñ Ìä∏Î†àÏù¥ÎçîÎì§ÏóêÍ≤å Ïã†Î¢∞Î∞õÍ≥† ÏûàÎäî Í∏ÄÎ°úÎ≤å Î∏åÎ°úÏª§ÏòàÏöî.`,
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-1-input-info',
                    content: `ÏïÑÎûò Ï†ïÎ≥¥Î•º Ï†ïÌôïÌûà ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî:\n\n‚úì Í±∞Ï£ºÏßÄ: Republic of Korea (ÎåÄÌïúÎØºÍµ≠)\n‚úì Ïù¥Î©îÏùº Ï£ºÏÜå: Ïã§Ï†ú ÏÇ¨Ïö©ÌïòÎäî Ïù¥Î©îÏùº ÏûÖÎ†•\n‚úì ÎπÑÎ∞ÄÎ≤àÌò∏: 8~16Ïûê, ÎåÄÏÜåÎ¨∏Ïûê/Ïà´Ïûê/ÌäπÏàòÎ¨∏Ïûê Ï°∞Ìï© ÌïÑÏàò\n‚úì Í≥ÑÏ†ï Ïú†Ìòï ÏÑ†ÌÉù: Í∞úÏù∏ / ÌöåÏÇ¨ Ï§ë Ìï¥Îãπ Ìï≠Î™© ÏÑ†ÌÉù\n‚úì ÏïΩÍ¥Ä ÎèôÏùò Ï≤¥ÌÅ¨Î∞ïÏä§ ÌôïÏù∏ Î∞è ÏÑ†ÌÉù`,
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-1-instruction',
                    content: 'ÏûÖÎ†• ÏôÑÎ£å ÌõÑ ÎùºÏù¥Î∏å Í≥ÑÏ†ï Ïò§ÌîàÌïòÍ∏∞ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-1-action',
                    content: '',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Vantage Ïã§Í≥ÑÏ¢å Ïã†Ï≤≠ ÌôàÌéòÏù¥ÏßÄ Ïó¥Í∏∞ ‚Üí',
                        type: 'link',
                        action: () => {
                          window.open(brokerUrl, '_blank');
                        }
                      }
                    ]
                  },
                  {
                    id: 'step-1-complete',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Í≥ÑÏ¢å Ïã†Ï≤≠ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Í≥ÑÏ¢å Ïã†Ï≤≠ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(2);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 1, isProcessing: false });
              break;
            }

            case 2: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';
              const brokerName = isDemo ? 'ICMarkets' : 'Vantage';
              const clientAreaText = isDemo ? 'Secure Client Area' : 'Set Password';

              if (isDemo) {
                // Demo flow - keep existing
                get().addMessageGroup([
                  {
                    id: 'step-2-title',
                    content: '2Îã®Í≥Ñ: Ïù¥Î©îÏùº Ïù∏Ï¶ù Î∞è ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÑ§Ï†ï',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: true,
                  },
                  {
                    id: 'step-2-intro',
                    content: 'ÏûòÌïòÏÖ®Ïñ¥Ïöî! Ïù¥Ï†ú Ïù¥Î©îÏùºÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: true,
                  },
                  {
                    id: 'step-2-email',
                    content: `üìß Î©îÏùºÏóêÏÑú **"${clientAreaText}"** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥\nÎπÑÎ∞ÄÎ≤àÌò∏ ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï¥Ïöî.\n\nÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÑ§Ï†ïÌïòÏãúÎ©¥ **Í≥ÑÏ¢å Ïã†Ï≤≠Ïù¥ ÏôÑÎ£å**Îê©ÎãàÎã§!`,
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: true,
                  },
                  {
                    id: 'step-2-tip',
                    content: `üí° **Tip!**\nÎ©îÏùºÏù¥ Ïïà Î≥¥Ïù¥ÎÇòÏöî?\n**Ïä§Ìå∏Ìï®**ÎèÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî. **${brokerName}** Î©îÏùºÏù¥ Í∞ÄÎÅî Ïä§Ìå∏ÏúºÎ°ú Î∂ÑÎ•òÎê† Ïàò ÏûàÏñ¥Ïöî.`,
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: true,
                  },
                  {
                    id: 'step-2-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: true,
                    buttons: [
                      {
                        label: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(3);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live account flow - new content
                get().addMessageGroup([
                  {
                    id: 'step-2-title',
                    content: '2Îã®Í≥Ñ: Ïù¥Î©îÏùº Ïù∏Ï¶ù',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-2-intro',
                    content: 'ÏûòÌïòÏÖ®Ïñ¥Ïöî!\n\nÏù¥Ï†ú Ï∂îÍ∞Ä Î≥∏Ïù∏ Ïù∏Ï¶ù Ï†àÏ∞®Î•º ÏßÑÌñâÌï¥ Î≥ºÍ≤åÏöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-2-steps',
                    content: '1. ÏûÖÎ†•Ìïú Ïù¥Î©îÏùºÎ°ú **OTP Î≥¥ÎÇ¥Í∏∞** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.\n2. Î∞õÏùÄÎ©îÏùºÌï®ÏóêÏÑú **Ïù∏Ï¶ù ÏΩîÎìú**Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.\n3. Ìï¥Îãπ Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìúÎ•º ÏûÖÎ†• ÌõÑ **Ï†úÏ∂ú**Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-2-tip',
                    content: 'üí° Tip!\nÎ∞õÏùÄÎ©îÏùºÌï®Ïóê Ïïà Î≥¥Ïùº Í≤ΩÏö∞ **Ïä§Ìå∏Î©îÏùºÌï®**ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-2-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Ïù¥Î©îÏùº Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Ïù¥Î©îÏùº Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(3);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 2, isProcessing: false });
              break;
            }

            case 3: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';

              if (isDemo) {
                // Demo flow - existing step 3 (Login)
                const brokerName = 'ICMarkets';
                const loginUrl = 'https://secure.icmarkets.com/Account/LogOn';
                get().addMessageGroup([
                  {
                    id: 'step-3-title',
                    content: '3Îã®Í≥Ñ: Î°úÍ∑∏Ïù∏ÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-3-intro',
                    content: `ÏôÑÎ≤ΩÌï¥Ïöî! Ïù¥Ï†ú ${brokerName}Ïóê Î°úÍ∑∏Ïù∏Ìï¥Î≥ºÍ≤åÏöî.`,
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: `${brokerName} Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô ‚Üí`,
                        type: 'link',
                        action: () => {
                          window.open(loginUrl, '_blank');
                        }
                      }
                    ]
                  },
                  {
                    id: 'step-3-info',
                    content: 'üîê Î∞©Í∏à Í∞ÄÏûÖÌïòÏã† **Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏**Î°ú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-3-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Î°úÍ∑∏Ïù∏ÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Î°úÍ∑∏Ïù∏ÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(4);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live flow - NEW Step 3: Phone verification
                get().addMessageGroup([
                  {
                    id: 'step-3-title',
                    content: '3Îã®Í≥Ñ: Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ù',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-3-intro',
                    content: 'Î≥∏Ïù∏ ÌôïÏù∏ÏùÑ ÏúÑÌï¥ Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ùÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-3-steps',
                    content: '1. Íµ≠Í∞ÄÏΩîÎìú(ÌïúÍµ≠ +82)Î•º ÏÑ†ÌÉùÌïú ÌõÑ Ï†ÑÌôîÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.\n2. **OTP Î≥¥ÎÇ¥Í∏∞** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.\n3. Î¨∏ÏûêÎ©îÏãúÏßÄÎ°ú Î∞õÏùÄ Ïù∏Ï¶ù ÏΩîÎìúÎ•º ÏûÖÎ†•Ìïú ÌõÑ **Ï†úÏ∂ú**Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-3-tip',
                    content: 'üí° Tip!\nÎ¨∏ÏûêÎ©îÏãúÏßÄÍ∞Ä Ïïà Ïò¨ Í≤ΩÏö∞ **Ï∞®Îã®Îêú(Ïä§Ìå∏) Î©îÏãúÏßÄ**Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-3-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(4);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 3, isProcessing: false });
              break;
            }

            case 4: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';

              if (isDemo) {
                // Demo flow - existing step 4 (Open Account)
                const accountTypeTitle = 'Îç∞Î™®Í≥ÑÏ¢å';
                const buttonText = 'Îç∞Î™®Í≥ÑÏ¢å Í∞úÏÑ§ Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏñ¥Ïöî';
                const stepIntro = 'Ïù¥Ï†ú AI Ìà¨ÏûêÎ•º Ï≤¥ÌóòÌï† Îç∞Î™®Í≥ÑÏ¢åÎ•º ÎßåÎì§Ïñ¥Î≥ºÍ≤åÏöî!';
                const stepInstructions = 'üìå **Î°úÍ∑∏Ïù∏ ÌõÑ Îã§Ïùå ÏàúÏÑúÎ°ú ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî:**\n**Account** ÌÉ≠ ‚Üí **Demo Account** ‚Üí **"Open New Demo Account"** Î≤ÑÌäº ÌÅ¥Î¶≠';
                const safetyMessage = 'üí∞ **ÏïàÏã¨ÌïòÏÑ∏Ïöî!**\n**Îç∞Î™®Í≥ÑÏ¢å**Îäî Í∞ÄÏÉÅÏùò ÎèàÏúºÎ°ú Í±∞ÎûòÌïòÎäî Ïó∞ÏäµÍ≥ÑÏ¢åÏòàÏöî. Ïã§Ï†ú ÎèàÏù¥ Îì§Ïñ¥Í∞ÄÏßÄ ÏïäÏúºÎãà Î∂ÄÎã¥ÏóÜÏù¥ Ï≤¥ÌóòÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî.';

                get().addMessageGroup([
                  {
                    id: 'step-4-title',
                    content: `4Îã®Í≥Ñ: ${accountTypeTitle} Í∞úÏÑ§ÌïòÍ∏∞`,
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-intro',
                    content: stepIntro,
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-steps',
                    content: stepInstructions,
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-safety',
                    content: safetyMessage,
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: buttonText,
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: buttonText,
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(5);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live flow - NEW Step 4: Personal information
                get().addMessageGroup([
                  {
                    id: 'step-4-title',
                    content: '4Îã®Í≥Ñ: Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†•',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-intro',
                    content: 'Í∞úÏù∏ Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÎ©¥ Í≥ÑÏ¢å ÏÑ§Ï†ïÏù¥ ÏôÑÎ£åÎê©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-info',
                    content: '‚úì **Ïù¥Î¶Ñ, ÏÑ±, ÏÑ±Î≥Ñ** (Ïó¨Í∂å Í∏∞Ï§Ä ÏòÅÎ¨∏)\n‚úì **ÏÉùÎÖÑÏõîÏùº** (Ïùº/Ïõî/ÎÖÑ ÏàúÏÑú)\n‚úì **Ï£ºÏöî Í±∞Ï£ºÍµ≠Í∞Ä, Íµ≠Ï†Å**: ÎåÄÌïúÎØºÍµ≠',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-warning',
                    content: '‚ö†Ô∏è Ï§ëÏöî!\n**Î™®Îì† Ï†ïÎ≥¥Îäî Ïó¨Í∂å Í∏∞Ï§ÄÏúºÎ°ú ÏûëÏÑ±**Ìï¥Ïïº Ìï¥Ïöî.\nÏûòÎ™ªÎêú ÏòÅÎ¨∏ Ïù¥Î¶Ñ ÏûÖÎ†•Ïãú KYC Î≥∏Ïù∏ Ïù∏Ï¶ù\nÎ∞è Ï∂úÍ∏àÏù¥ ÏßÄÏó∞Îê† Ïàò ÏûàÏäµÎãàÎã§.\nÏòàÏãú) ÍπÄÏûêÎèô ‚Üí First Name: Jadong, Last Name: Kim\n\n**Í≥ÑÏÜç** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-4-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†•ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†•ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(5);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 4, isProcessing: false });
              break;
            }

            case 5: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';
              const accountType = userData.accountType || 'demo';

              if (isDemo) {
                // Demo flow - existing step 5 (Account Settings)
                get().addMessageGroup([
                  {
                    id: 'step-5-title',
                    content: '5Îã®Í≥Ñ: Í≥ÑÏ¢å ÏÑ§Ï†ïÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-intro',
                    content: 'ÏïÑÎûò ÏÑ§Ï†ïÍ≥º Ï†ïÌôïÌûà ÎèôÏùºÌïòÍ≤å Í≥ÑÏ¢åÎ•º Í∞úÏÑ§Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-settings',
                    content: '',
                    sender: 'ai',
                    type: 'account_settings',
                    timestamp: new Date(),
                    animate: false,
                    accountType: accountType,
                  },
                  {
                    id: 'step-5-warning',
                    content: '‚ö†Ô∏è **Ï£ºÏùò!**\n\nÍ≥ÑÏ¢åÏÑ§Ï†ïÏù¥ Îã§Î•¥Î©¥ **AI ÌîÑÎ°úÍ∑∏Îû®Ïù¥ ÏûëÎèôÌïòÏßÄ ÏïäÏïÑÏöî**.\nÍº≠ ÏúÑÏùò ÏÑ§Ï†ïÎåÄÎ°ú ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî!',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'ÏÑ§Ï†ïÎåÄÎ°ú Í≥ÑÏ¢åÎ•º Í∞úÏÑ§ÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'ÏÑ§Ï†ïÎåÄÎ°ú Í≥ÑÏ¢åÎ•º Í∞úÏÑ§ÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(6);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live flow - NEW Step 5: KYC Verification
                get().addMessageGroup([
                  {
                    id: 'step-5-title',
                    content: '5Îã®Í≥Ñ: Ïã†Î∂Ñ Ïù∏Ï¶ù (KYC Verification)',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-intro',
                    content: 'Ïã§Í±∞Îûò Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥ Ïã†Î∂Ñ Ïù∏Ï¶ùÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-info',
                    content: 'üí° Ïã†Î∂Ñ Ïù∏Ï¶ùÏù¥ÎûÄ?\nÏã†Î∂Ñ Ïù∏Ï¶ùÏùÑ ÌÜµÌï¥ **Î≥¥Ï¶ùÍ∏à, Ï∂úÍ∏à, ÏûÖÍ∏à ÌïúÎèÑ**Í∞Ä Ìï¥Ï†úÎê©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-docs',
                    content: 'üìã **Ïù∏Ï¶ù Í∞ÄÎä•Ìïú Ïã†Î∂ÑÏ¶ù Ïú†Ìòï**\n- Ïö¥Ï†ÑÎ©¥ÌóàÏ¶ù\n- ID Ïπ¥Îìú/Ï£ºÎØºÎì±Î°ùÏ¶ù  \n- Í±∞Ï£º Ïπ¥Îìú/Ïô∏Íµ≠Ïù∏ Îì±Î°ùÏ¶ù\n- Ïó¨Í∂å',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-steps',
                    content: '1. Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ® Î∞è ÎèôÏùò Ìï≠Î™©ÏùÑ ÏùΩÍ≥† ÌôïÏù∏Ìï©ÎãàÎã§.\n2. "ÎÇ¥ Í∞úÏù∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Ïóê ÎèôÏùòÌï©ÎãàÎã§" Ï≤¥ÌÅ¨ ÌõÑ **Í≥ÑÏÜç** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.\n3. Ïù¥Î¶Ñ, ÏÑ±, Íµ≠Ï†Å, ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†• ÌõÑ Í≥ÑÏÜç Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî. (Ïù¥ÎØ∏ ÏûÖÎ†•Ìïú Í≤ΩÏö∞ ÏûêÎèô ÌëúÏãúÎê©ÎãàÎã§.)\n4. Ïù∏Ï¶ùÌï† Ïã†Î∂ÑÏ¶ùÏùò Ïú†ÌòïÏùÑ ÏÑ†ÌÉùÌïú ÌõÑ Í≥ÑÏÜç Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.\n5. Ïã†Î∂ÑÏ¶ùÏùò **ÏïûÎ©¥/Îí∑Î©¥ ÏÇ¨ÏßÑ**ÏùÑ ÏóÖÎ°úÎìúÌïú ÌõÑ Í≥ÑÏÜç Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî. (Ïó¨Í∂åÏùÄ Î©îÏù∏ Ï†ïÎ≥¥ ÌéòÏù¥ÏßÄÎ•º Ïò¨Î¶¨Î©¥ Îê©ÎãàÎã§.)',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-warning',
                    content: '‚ö†Ô∏è Ï£ºÏùò!\n**Ï†ïÎ≥¥ Î∂àÏùºÏπò, ÌùêÎ¶øÌïú ÏÇ¨ÏßÑ, Ï°∞Î™Ö Î∞òÏÇ¨** Îì±ÏùÄ Ïù∏Ï¶ù Ïã§Ìå® ÏõêÏù∏Ïù¥ Îê† Ïàò ÏûàÏúºÎãà Ï£ºÏùòÌï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-5-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Ïã†Ïõê ÌôïÏù∏ ÏÑúÎ•òÎ•º ÏóÖÎ°úÎìúÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Ïã†Ïõê ÌôïÏù∏ ÏÑúÎ•òÎ•º ÏóÖÎ°úÎìúÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(6);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 5, isProcessing: false });
              break;
            }

            case 6: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';

              if (isDemo) {
                // Demo flow - existing step 6 (Request Program Start with 3 fields)
                get().addMessageGroup([
                  {
                    id: 'step-6-title',
                    content: '6Îã®Í≥Ñ: ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë ÏöîÏ≤≠ÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-celebration',
                    content: 'Ï∂ïÌïòÌï¥Ïöî! Îç∞Î™®Í≥ÑÏ¢å Í∞úÏÑ§Ïù¥ ÏôÑÎ£åÎêòÏóàÏñ¥Ïöîüéâ',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-intro',
                    content: 'AI ÏûêÎèôÌà¨Ïûê ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûëÏùÑ ÏúÑÌï¥ Í≥ÑÏ¢å Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-account-info',
                    content: 'üìã **Account ÌéòÏù¥ÏßÄÏóêÏÑú Îã§Ïùå Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî:**\n\n‚Ä¢ **Account ID** (Í≥ÑÏ¢åÎ≤àÌò∏)\n‚Ä¢ **Password** (ÎπÑÎ∞ÄÎ≤àÌò∏)\n‚Ä¢ **Server** (ÏÑúÎ≤ÑÎ™Ö)',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-security',
                    content: 'üîí **ÏïàÏã¨ÌïòÏÑ∏Ïöî!**\nÎ∏åÎ°úÏª§ ÌôàÌéòÏù¥ÏßÄ Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ÏôÄ Í±∞Îûò Í≥ÑÏ¢å Ï†ïÎ≥¥Îäî **ÏôÑÏ†ÑÌûà Îã§Î•∏ Í±∞**ÏòàÏöî.\nÍ≥ÑÏ¢å Ï†ïÎ≥¥Îäî **AI ÌîÑÎ°úÍ∑∏Îû® Ïó∞ÎèôÏóêÎßå** ÏÇ¨Ïö©Îê©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-form',
                    content: '',
                    sender: 'ai',
                    type: 'form',
                    timestamp: new Date(),
                    animate: false,
                    formFields: [
                      {
                        id: 'accountId',
                        label: 'Account ID',
                        type: 'tel',
                        placeholder: 'Í≥ÑÏ¢åÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                        required: true,
                        value: ''
                      },
                      {
                        id: 'password',
                        label: 'Password',
                        type: 'text',
                        placeholder: 'Í≥ÑÏ¢å ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                        required: true,
                        value: ''
                      },
                      {
                        id: 'server',
                        label: 'Server',
                        type: 'text',
                        placeholder: 'ÏÑúÎ≤ÑÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                        required: true,
                        value: ''
                      }
                    ],
                    buttons: [
                      {
                        label: 'ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë ÏöîÏ≤≠ÌïòÍ∏∞',
                        type: 'primary',
                        action: () => {
                          get().submitUserForm('step-6-form');
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live flow - NEW Step 6: Trading Account Creation
                get().addMessageGroup([
                  {
                    id: 'step-6-title',
                    content: '6Îã®Í≥Ñ: Í±∞Îûò Í≥ÑÏ¢å Í∞úÏÑ§',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-intro',
                    content: 'Í±∞Îûò ÏãúÏûë Ï§ÄÎπÑÍ∞Ä Í±∞Ïùò ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.\n\nÎ≥¥Ï¶ùÍ∏à, Ï∂úÍ∏à, ÏûÖÍ∏à ÌïúÎèÑÍ∞Ä Ìï¥Ï†úÎêú **Í≥ÑÏ†ï ÏÑ§Ï†ï**ÏùÑ ÏßÑÌñâÌï† Í±∞ÏóêÏöî.\n\nÏïÑÎûò Ìï≠Î™©ÏùÑ Ï†ïÌôïÌûà ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî:',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-settings',
                    content: '**Í±∞Îûò ÌîåÎû´Ìèº**: Î©îÌÉÄÌä∏Î†àÏù¥Îçî 5 (Ï≤´ Í≥ÑÏ¢å Í∞úÏÑ§ ÏãúÏóêÎäî Î≥ÄÍ≤Ω Î∂àÍ∞Ä)\n\n**Í≥ÑÏ¢å Ïú†Ìòï**: RAW ECN\n\n**Í≥ÑÏ¢å ÌÜµÌôî**: USD\n\n**V-Wallet Ïó∞Í≤∞**: Ï≤¥ÌÅ¨ (ÏïîÌò∏ÌôîÌèê ÏûÖÏ∂úÍ∏à ÏÇ¨Ïö© Í∞ÄÎä•)\n\n**Ï†úÏ∂ú** ÌõÑ ÏÑ§Ï†ï ÏôÑÎ£å Î©îÏãúÏßÄÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-tip',
                    content: 'üí° Ï∞∏Í≥†!\nÏµúÏ¥à ÏÉùÏÑ±ÎêòÎäî Ïã§Í±∞Îûò Í≥ÑÏ¢åÎäî **Î©îÌÉÄÌä∏Î†àÏù¥Îçî 5(MT5) ÌîåÎû´Ìèº**ÏúºÎ°ú ÏûêÎèô ÏÑ§Ï†ïÎê©ÎãàÎã§.\nÏù¥ÌõÑ **MT4 Í≥ÑÏ¢å, Copy Trading Ï†ÑÏö© Í≥ÑÏ¢å**Î•º Ï∂îÍ∞Ä Í∞úÏÑ§Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-6-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Í±∞Îûò Í≥ÑÏ¢å Í∞úÏÑ§ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Í±∞Îûò Í≥ÑÏ¢å Í∞úÏÑ§ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(7);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 6, isProcessing: false });
              break;
            }

            case 7: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';

              if (isDemo) {
                // Demo flow - existing step 7 (MetaTrader 5 App Install)
                get().addMessageGroup([
                  {
                    id: 'step-7-title',
                    content: '7Îã®Í≥Ñ: MetaTrader 5 Ïï± ÏÑ§ÏπòÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-intro',
                    content: 'Í∑∏ÎèôÏïà Ìà¨Ïûê Í≤∞Í≥ºÎ•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÎäî Ïï±ÏùÑ ÏÑ§ÏπòÌï¥Î≥ºÍ≤åÏöî!',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-info',
                    content: 'üí° **MetaTrader 5ÎûÄ?**\nÏâΩÍ≤å ÎßêÌï¥ÏÑú ÌÜ†Ïä§ÎÇò Ïπ¥Ïπ¥Ïò§ÌéòÏù¥ÎùºÍ≥† Î≥¥Î©¥ ÎèºÏöî. ÌïòÎÇòÏùò Ïï±Ïóê Ïó¨Îü¨ ÏùÄÌñâ Í≥ÑÏ¢åÎ•º Ïó∞Í≤∞Ìï¥ÏÑú Ìïú Í≥≥ÏóêÏÑú ÏÜ°Í∏àÌïòÍ≥† Í≤∞Ï†úÌï† Ïàò ÏûàÎäî Í≤ÉÏ≤òÎüº, MetaTrader 5Îäî Ïó¨Îü¨ Î∏åÎ°úÏª§Ïùò Í≥ÑÏ¢åÎ•º Ìïú Ïï±ÏóêÏÑú Ïó∞Í≤∞Ìï¥ Í¥ÄÎ¶¨ÌïòÍ≥† Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-downloads',
                    content: '',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'ÏïàÎìúÎ°úÏù¥Îìú Ïï± Îã§Ïö¥Î°úÎìú ‚Üí',
                        type: 'link',
                        action: () => {
                          window.open('https://play.google.com/store/apps/details?id=net.metaquotes.metatrader5&hl=ko', '_blank');
                        }
                      },
                      {
                        label: 'ÏïÑÏù¥Ìè∞ Ïï± Îã§Ïö¥Î°úÎìú ‚Üí',
                        type: 'link',
                        action: () => {
                          window.open('https://apps.apple.com/kr/app/metatrader-5/id413251709', '_blank');
                        }
                      }
                    ]
                  },
                  {
                    id: 'step-7-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Ïï± ÏÑ§ÏπòÎ•º ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Ïï± ÏÑ§ÏπòÎ•º ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(8);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live flow - NEW Step 7: Vantage App Install
                get().addMessageGroup([
                  {
                    id: 'step-7-title',
                    content: '7Îã®Í≥Ñ: Vantage Ïï± ÏÑ§Ïπò',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-intro',
                    content: 'Copy TradingÏùÑ ÏßÑÌñâÌïòÍ∏∞ ÏúÑÌï¥ Vantage Ïï±Ïù¥ ÌïÑÏöîÌï¥Ïöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-info',
                    content: 'üì± Ïï±Ïä§ÌÜ†Ïñ¥ ÎòêÎäî Íµ¨Í∏Ä ÌîåÎ†àÏù¥ÏóêÏÑú **"Vantage"** Ïï±ÏùÑ Í≤ÄÏÉâ ÌõÑ ÏÑ§ÏπòÌï©ÎãàÎã§.\n\nÏÑ§Ïπò ÏôÑÎ£å ÌõÑ Ïï±ÏùÑ Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-warning',
                    content: '‚ö†Ô∏è Ï§ëÏöî!\n**Î∞òÎìúÏãú Ïï±ÏúºÎ°ú ÏßÑÌñâ**ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-7-downloads',
                    content: '',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Vantage ÏïàÎìúÎ°úÏù¥Îìú Ïï± Îã§Ïö¥Î°úÎìú ‚Üí',
                        type: 'link',
                        action: () => {
                          window.open('https://play.google.com/store/apps/details?id=cn.com.vau', '_blank');
                        }
                      },
                      {
                        label: 'Vantage ÏïÑÏù¥Ìè∞ Ïï± Îã§Ïö¥Î°úÎìú ‚Üí',
                        type: 'link',
                        action: () => {
                          window.open('https://apps.apple.com/kr/app/vantage-all-in-one-trading-app/id1457929724', '_blank');
                        }
                      }
                    ]
                  },
                  {
                    id: 'step-7-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Ïï± ÏÑ§ÏπòÎ•º ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Ïï± ÏÑ§ÏπòÎ•º ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(8);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 7, isProcessing: false });
              break;
            }

            case 8: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';

              if (isDemo) {
                // Demo flow - existing step 8 (MetaTrader 5 Login)
                get().addMessageGroup([
                  {
                    id: 'step-8-title',
                    content: '8Îã®Í≥Ñ: MetaTrader 5 Î°úÍ∑∏Ïù∏ÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-intro',
                    content: 'ÏÑ§ÏπòÌïú MetaTrader 5 Ïï±Ïóê Î∞©Í∏à ÏÉùÏÑ±Ìïú Í≥ÑÏ¢åÎ°ú Î°úÍ∑∏Ïù∏Ìï¥Î≥ºÍ≤åÏöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-instructions',
                    content: 'üì± **MetaTrader 5 Ïï±ÏóêÏÑú Î°úÍ∑∏Ïù∏ Î∞©Î≤ï:**\n\n1. Ïö∞Ï∏° ÌïòÎã® ‚öôÔ∏è **ÏÑ∏ÌåÖ** ÌÅ¥Î¶≠\n2. **ÏÉà Í≥ÑÏ¢å** ÌÅ¥Î¶≠\n3. **Í∏∞Ï°¥ Í≥ÑÏ¢åÎ°ú Î°úÍ∑∏Ïù∏** ÌÅ¥Î¶≠\n4. ÏÑúÎ≤Ñ Í≤ÄÏÉâÌï¥ÏÑú ÏÑ†ÌÉù\n5. Î°úÍ∑∏Ïù∏, ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• ÌõÑ **Î°úÍ∑∏Ïù∏** ÌÅ¥Î¶≠',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-userdata',
                    content: `üìã **ÏûÖÎ†•Ìï† Ï†ïÎ≥¥** (ÏïûÏÑú ÏÉùÏÑ±Ìïú Í≥ÑÏ¢å Ï†ïÎ≥¥):\n\n‚Ä¢ **ÏÑúÎ≤Ñ:** ${userData.server || '[ÏÑúÎ≤Ñ Ï†ïÎ≥¥ ÏóÜÏùå]'}\n‚Ä¢ **Î°úÍ∑∏Ïù∏ (Í≥ÑÏ¢åÎ≤àÌò∏):** ${userData.accountId || '[Í≥ÑÏ¢åÎ≤àÌò∏ ÏóÜÏùå]'}\n‚Ä¢ **ÎπÑÎ∞ÄÎ≤àÌò∏:** ${userData.password || '[ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÜÏùå]'}`,
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-tip',
                    content: 'üí° **Tip!**\nÏÑúÎ≤Ñ Ïù¥Î¶ÑÏù¥ Ï†ïÌôïÌûà Î≥¥Ïù¥ÏßÄ ÏïäÏúºÎ©¥ Í≤ÄÏÉâÏ∞ΩÏóê **"ICMarkets"**ÎùºÍ≥† ÏûÖÎ†•Ìï¥ÏÑú Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî.\n\n‚ö†Ô∏è Î°úÍ∑∏Ïù∏Ïù¥ Ïïà ÎêúÎã§Î©¥ Í≥ÑÏ¢å ÌôúÏÑ±ÌôîÍπåÏßÄ **Î™á Î∂Ñ Ï†ïÎèÑ Í±∏Î¶¥ Ïàò ÏûàÏñ¥Ïöî**.',
                    sender: 'ai',
                    type: 'warning_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Î°úÍ∑∏Ïù∏ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Î°úÍ∑∏Ïù∏ÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(9);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              } else {
                // Live flow - NEW Step 8: Vantage Login
                get().addMessageGroup([
                  {
                    id: 'step-8-title',
                    content: '8Îã®Í≥Ñ: Î°úÍ∑∏Ïù∏ÌïòÍ∏∞',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-intro',
                    content: 'Ï¢ãÏïÑÏöî! Ïù¥Ï†ú VantageÏóê Î°úÍ∑∏Ïù∏Ìï¥Î≥ºÍ≤åÏöî.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-info',
                    content: 'üîê Î∞©Í∏à Í∞ÄÏûÖÌïòÏã† Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-8-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Î°úÍ∑∏Ïù∏ÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Î°úÍ∑∏Ïù∏ÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(9);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 8, isProcessing: false });
              break;
            }

            case 9: {
              const { userData } = get();
              const isDemo = userData.accountType === 'demo';

              if (isDemo) {
                // Demo flow - existing step 9 (Final Completion)
                get().addMessageGroup([
                  {
                    id: 'step-9-title',
                    content: '‚ú® Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë!',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-9-success',
                     content: '‚úÖ **Î™®Îì† ÏÑ§Ï†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!**\n\n‚Ä¢ **Îç∞Î™®Í≥ÑÏ¢å Í∞úÏÑ§** ÏôÑÎ£å\n‚Ä¢ **AI ÌîÑÎ°úÍ∑∏Îû® Ïó∞Îèô Ïã†Ï≤≠** ÏôÑÎ£å\n‚Ä¢ **Î™®ÎãàÌÑ∞ÎßÅ Ïï± ÏÑ§Ïπò** ÏôÑÎ£å',
                     sender: 'ai',
                     type: 'success_box',
                     timestamp: new Date(),
                     animate: false,
                   },
                  {
                    id: 'step-9-intro',
                    content: 'Ï∂ïÌïòÌï©ÎãàÎã§! Ïù¥Ï†ú Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í±∞Îûò ÎÇ¥Ïó≠Í≥º ÏàòÏùµÎ•†ÏùÑ ÌôïÏù∏ÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî.\nÌîÑÎ°úÍ∑∏Îû® Ïö¥Ïö©Ïù¥ ÏãúÏûëÎêòÎ©¥ Îß§ÎãàÏ†ÄÎ•º ÌÜµÌï¥ Ï†ÑÎã¨Ìï¥ÎìúÎ¶¥Í≤åÏöî!',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  }
                  ]);
                  
                  setTimeout(() => {
                    set(state => ({
                      messages: [...state.messages, {
                        id: 'step-9-additional-info',
                        content: 'Îçî ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥Îäî ÏïÑÎûò Î≤ÑÌäºÏùÑ ÌÜµÌï¥ ÌôïÏù∏ÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî.',
                        sender: 'ai',
                        type: 'text',
                        timestamp: new Date(),
                        animate: true,
                      }]
                    }));
                    
                    setTimeout(() => {
                      set(state => ({
                        messages: [...state.messages, {
                          id: 'final-buttons',
                          content: '',
                          sender: 'ai',
                          type: 'final_cards',
                          timestamp: new Date(),
                          animate: false,
                          buttons: [
                            {
                              label: 'üè† DF717 ÏÜåÍ∞ú',
                              description: 'Ïö∞Î¶¨Í∞Ä ÎàÑÍµ¨Ïù∏ÏßÄ ÏïåÏïÑÎ≥¥Í∏∞',
                              type: 'card',
                              action: () => {
                                window.open('https://www.df717.ai/', '_blank');
                              }
                            },
                            {
                              label: 'üìä Ïã§ÏãúÍ∞Ñ ÏàòÏùµÎ•†',
                              description: '8.3ÎÖÑ Í≤ÄÏ¶ùÎêú Ïã§Í≥ÑÏ¢å',
                              type: 'card',
                              action: () => {
                                window.open('https://aiwow.notion.site/DF717-LIVE-ACCOUNT-20dc67e3da6880dfbc4cefa57ae38bf7', '_blank');
                              }
                            },
                            {
                              label: 'üìà Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º',
                              description: '20ÎÖÑ Í≤ÄÏ¶ù, 65.9% ÏàòÏùµÎ•†',
                              type: 'card',
                              action: () => {
                                window.open('https://aiwow.notion.site/DF717-Backtest-20fc67e3da68809780c0f8302bfc12bf', '_blank');
                              }
                            },
                            {
                              label: 'üîÑ Ï≤òÏùåÏúºÎ°ú',
                              description: 'Ï≤´ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞',
                              type: 'card',
                              action: () => {
                                get().resetChat();
                                get().initializeChat();
                              }
                            }
                          ]
                        }]
                      }));
                    }, 400);
                  }, 800);
              } else {
                // Live flow - NEW Step 9: Copy Trading Account Creation
                get().addMessageGroup([
                  {
                    id: 'step-9-title',
                    content: '9Îã®Í≥Ñ: Copy Trading Í≥ÑÏ¢å Í∞úÏÑ§',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-9-intro',
                    content: 'Ïπ¥Ìîº Ìä∏Î†àÏù¥Îî©ÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ **Î≥ÑÎèÑÏùò Ï†ÑÏö© Í≥ÑÏ¢å**Î•º Î®ºÏ†Ä Í∞úÏÑ§Ìï¥Ïïº Ìï©ÎãàÎã§.',
                    sender: 'ai',
                    type: 'text',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-9-info',
                    content: 'üí° Ï∞∏Í≥†!\nÍ≥ÑÏ¢åÎäî ÏùºÎ∞ò Í±∞ÎûòÍ≥ÑÏ¢åÏôÄ Î≥ÑÎèÑÎ°ú **Ïπ¥ÌîºÌä∏Î†àÏù¥Îî© Ï†ÑÏö©**ÏûÖÎãàÎã§.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-9-steps',
                    content: 'üì± Vantage Ïï±ÏóêÏÑú:\n1. ÏÉÅÎã®Ïùò Live 00000000 Í≥ÑÏ¢åÎ≤àÌò∏ ÌÅ¥Î¶≠\n2. Í≥ÑÏ†ïÍ¥ÄÎ¶¨ ÏÑπÏÖò ÌïòÎã®Ïùò "Ïã§Í≥ÑÏ¢å Ï∂îÍ∞Ä" ÌÅ¥Î¶≠\n3. ÎèôÎ™ÖÍ≥ÑÏ¢å Í∞úÏÑ§ ÌéòÏù¥ÏßÄÏóêÏÑú ÏïÑÎûò ÏÑ§Ï†ï ÌôïÏù∏\n\nüìã Í≥ÑÏ¢å ÏÑ§Ï†ï:\n- **Í≥ÑÏ†ï ÌîåÎû´Ìèº**: Copy Trading\n- **Í≥ÑÏ†ï Ïú†Ìòï**: ECN\n- **Í≥ÑÏ†ï ÌÜµÌôî**: USD\n\nÍ∞úÏù∏ÏÑ†Ïñ∏Î¨∏ ÎèôÏùò ÌõÑ **Ï†úÏ∂ú** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.',
                    sender: 'ai',
                    type: 'info_box',
                    timestamp: new Date(),
                    animate: false,
                  },
                  {
                    id: 'step-9-action',
                    content: '',
                    sender: 'ai',
                    type: 'action_button',
                    timestamp: new Date(),
                    animate: false,
                    buttons: [
                      {
                        label: 'Copy Trading Í≥ÑÏ¢åÎ•º Í∞úÏÑ§ÌñàÏñ¥Ïöî',
                        type: 'primary',
                        action: () => {
                          get().addMessage({
                            id: `user-response-${Date.now()}`,
                            content: 'Copy Trading Í≥ÑÏ¢åÎ•º Í∞úÏÑ§ÌñàÏñ¥Ïöî',
                            sender: 'user',
                            type: 'text',
                            timestamp: new Date(),
                            animate: false
                          });
                          
                          setTimeout(() => {
                            get().proceedToStep(10);
                          }, 800);
                        }
                      }
                    ]
                  }
                ]);
              }
              
              set({ currentStep: 9, isProcessing: false });
              break;
            }

            case 10: {
              // Live flow only - NEW Step 10: Deposit
              get().addMessageGroup([
                {
                  id: 'step-10-title',
                  content: '10Îã®Í≥Ñ: Ìà¨ÏûêÍ∏à ÏûÖÍ∏à',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-10-intro',
                  content: 'Ïπ¥ÌîºÌä∏Î†àÏù¥Îî©ÏùÑ ÏãúÏûëÌïòÎ†§Î©¥ Í≥ÑÏ¢åÏóê ÏûêÍ∏àÏùÑ Î®ºÏ†Ä ÏûÖÍ∏àÌï¥Ïïº Ìï©ÎãàÎã§.',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-10-info',
                  content: 'üí∞ **DF717 ÏµúÏÜå Ìà¨ÏûêÍ∏à**: 3,000.00 USD Ïù¥ÏÉÅ',
                  sender: 'ai',
                  type: 'info_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-10-warning',
                  content: '‚ö†Ô∏è ÏûÖÍ∏à Ï†Ñ ÌôïÏù∏!\nÎ∞òÎìúÏãú **"Copy Trading Í≥ÑÏ¢å"**Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.',
                  sender: 'ai',
                  type: 'warning_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-10-steps',
                  content: 'üì± Vantage Ïï±ÏóêÏÑú:\n1. Ìôà ÌôîÎ©¥ "ÏûÖÍ∏à" Î≤ÑÌäº ÌÅ¥Î¶≠\n2. **Copy Trading Í≥ÑÏ¢å** ÏÑ†ÌÉù ÌôïÏù∏\n3. ÏûÖÍ∏à Í∏àÏï° ÏûÖÎ†• ÌõÑ Í≥ÑÏÜç Î≤ÑÌäº ÌÅ¥Î¶≠\n4. ÏûÖÍ∏à Î∞©Î≤ï ÏÑ†ÌÉù (Ïã†Ïö©Ïπ¥Îìú, Î°úÏª¨ ÏùÄÌñâ ÏÜ°Í∏à, ÏïîÌò∏ÌôîÌèê Îì±)\n5. **Ï†úÏ∂ú** Î≤ÑÌäº ÌÅ¥Î¶≠',
                  sender: 'ai',
                  type: 'info_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-10-action',
                  content: '',
                  sender: 'ai',
                  type: 'action_button',
                  timestamp: new Date(),
                  animate: false,
                  buttons: [
                    {
                      label: 'ÏûÖÍ∏àÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                      type: 'primary',
                      action: () => {
                        get().addMessage({
                          id: `user-response-${Date.now()}`,
                          content: 'ÏûÖÍ∏àÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                          sender: 'user',
                          type: 'text',
                          timestamp: new Date(),
                          animate: false
                        });
                        
                        setTimeout(() => {
                          get().proceedToStep(11);
                        }, 800);
                      }
                    }
                  ]
                }
              ]);
              
              set({ currentStep: 10, isProcessing: false });
              break;
            }

            case 11: {
              // Live flow only - NEW Step 11: Copy Trading Setup
              get().addMessageGroup([
                {
                  id: 'step-11-title',
                  content: '11Îã®Í≥Ñ: Copy Trading Í≥ÑÏ¢å ÏÑ§Ï†ïÌïòÍ∏∞',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-11-intro',
                  content: 'ÎßàÏßÄÎßâ Îã®Í≥ÑÏòàÏöî! AI Ï†ÑÎûµÏùÑ ÏÑ†ÌÉùÌïòÏó¨ Ïπ¥Ìîº ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌï¥Î≥ºÍ≤åÏöî.',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-11-search',
                  content: 'üîç **Ï†ÑÎûµ Í≤ÄÏÉâ**:\nVantage Ïï± ÌïòÎã®Ïùò **"Î∞úÍ≤¨"** ÌÉ≠ \n‚Üí ÏÉÅÎã®Ïùò "ÏãúÍ∑∏ÎÑê" ÌÅ¥Î¶≠ \n‚Üí Í≤ÄÏÉâÏ∞ΩÏóê **"DestinyFinance"** ÏûÖÎ†•\n‚Üí **ÏßÑÏûÖ**ÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.\n‚Üí **Ïπ¥Ìîº** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.',
                  sender: 'ai',
                  type: 'info_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-11-settings',
                  content: '‚öôÔ∏è **Ïπ¥ÌîºÌä∏Î†àÏù¥Îî© ÏÑ§Ï†ï**:\n\n**Î≥µÏÇ¨ Î™®Îìú**: Îì±Í∞Ä ÏÇ¨Ïö© Ï¶ùÍ±∞Í∏à\n- ÎßàÏä§ÌÑ∞ÏôÄÏùò ÏûîÏï°Ïóê ÎπÑÎ°ÄÌïòÏó¨ Îûè ÏÇ¨Ïù¥Ï¶à ÏûêÎèô ÏÑ§Ï†ï\n\n**Ìà¨Ïûê Í∏àÏï°**: ÏûÖÍ∏àÌïú Í∏àÏï° ÏûÖÎ†•\n- ÏòàÏãú: $3,000 ÏûÖÎ†• Ïãú ÏûîÍ≥†+Î≥¥ÎÑàÏä§=3,000 ÏÇ∞Ï∂ú\n\n**ÏúÑÌóò Í¥ÄÎ¶¨: 95%Î°ú Î≥ÄÍ≤Ω**\n- Ïã†Ìò∏Ï†úÍ≥µÏûêÏôÄ ÏµúÎåÄÌïú ÎπÑÏä∑Ìïú ÏàòÏ§ÄÏúºÎ°ú Îî∞ÎùºÍ∞ÄÍ∏∞ ÏúÑÌïú ÏÑ§Ï†ï\n- Ï¥ù Ìà¨ÏûêÍ∏à Î∞è ÏàòÏùµ, Ï∂úÍ∏à Îì±Ïùò Ìï©ÏÇ∞ÏúºÎ°ú Îß§Ïõî Í≥ÑÏÇ∞ÎêòÎäî ÏûîÍ≥†Ïùò 95%\n\n**ÏùµÏ†à**: ÎπÑÌôúÏÑ±Ìôî Ïú†ÏßÄ\n- Ïã†Ìò∏Ï†úÍ≥µÏûêÍ∞Ä Ï£ºÎ¨∏ÏùÑ Ï≤≠ÏÇ∞ÌïòÍ∏∞ÍπåÏßÄ Í≥ÑÏÜç Îî∞ÎùºÍ∞ê\n\n**Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏**: ÌôúÏÑ±Ìôî Ïú†ÏßÄ\n- ÏµúÏÜå Ïπ¥Ìîº ÎûèÏàòÎ≥¥Îã§ ÎÜíÍ≤å ÌïòÏó¨ Í±∞Îûò ÌôúÎèô Í∑πÎåÄÌôî\n\n**Ìè¨ÏßÄÏÖò Ïò§Îçî**: ÌôúÏÑ±Ìôî Î≥ÄÍ≤Ω\n- Ïπ¥Ìîº ÏãúÏûëÍ≥º ÎèôÏãúÏóê ÌòÑÏû¨ ÏãúÏû•Í∞Ä Í∏∞Ï§ÄÏúºÎ°ú Ï£ºÎ¨∏ ÏßÑÏûÖ\n\n**Ï†úÏ∂ú** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.',
                  sender: 'ai',
                  type: 'info_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-11-action',
                  content: '',
                  sender: 'ai',
                  type: 'action_button',
                  timestamp: new Date(),
                  animate: false,
                  buttons: [
                    {
                      label: 'Copy Trading ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                      type: 'primary',
                      action: () => {
                        get().addMessage({
                          id: `user-response-${Date.now()}`,
                          content: 'Copy Trading ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöî',
                          sender: 'user',
                          type: 'text',
                          timestamp: new Date(),
                          animate: false
                        });
                        
                        setTimeout(() => {
                          get().proceedToStep(12);
                        }, 800);
                      }
                    }
                  ]
                }
              ]);
              
              set({ currentStep: 11, isProcessing: false });
              break;
            }

            case 12: {
              // Live flow only - NEW Step 12: Approval Request (Account Number only)
              get().addMessageGroup([
                {
                  id: 'step-12-title',
                  content: '12Îã®Í≥Ñ: ÏäπÏù∏ ÏöîÏ≤≠ÌïòÍ∏∞',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-12-intro',
                  content: 'Ïù¥Ï†ú Ïπ¥ÌîºÌä∏Î†àÏù¥Îî© ÏäπÏù∏ÏùÑ ÏúÑÌï¥ **Copy Trading Í≥ÑÏ¢å Ï†ïÎ≥¥**Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-12-account-info',
                  content: 'üìã Vantage Ïï±ÏóêÏÑú Îã§Ïùå Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî:\n- ÏÉÅÎã®Ïùò Copy Trading Í≥ÑÏ¢åÎ≤àÌò∏Î•º ÌÅ¥Î¶≠\n- Account Number (Í≥ÑÏ¢åÎ≤àÌò∏) ÌôïÏù∏',
                  sender: 'ai',
                  type: 'info_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-12-security',
                  content: 'üîí ÏïàÏã¨ÌïòÏÑ∏Ïöî!\nÍ≥ÑÏ¢å Ï†ïÎ≥¥Îäî Copy Trading ÌîÑÎ°úÍ∑∏Îû® ÏäπÏù∏ÏóêÎßå ÏÇ¨Ïö©Îê©ÎãàÎã§.',
                  sender: 'ai',
                  type: 'warning_box',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-12-form',
                  content: '',
                  sender: 'ai',
                  type: 'form',
                  timestamp: new Date(),
                  animate: false,
                  formFields: [
                    {
                      id: 'accountId',
                      label: 'Account Number',
                      type: 'tel',
                      placeholder: 'Í≥ÑÏ¢åÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                      required: true,
                      value: ''
                    }
                  ],
                  buttons: [
                    {
                      label: 'ÏäπÏù∏ ÏöîÏ≤≠ÌïòÍ∏∞',
                      type: 'primary',
                      action: () => {
                        get().submitUserForm('step-12-form');
                      }
                    }
                  ]
                }
              ]);
              
              set({ currentStep: 12, isProcessing: false });
              break;
            }

            case 13: {
              // Live flow only - Final completion message
              get().addMessageGroup([
                {
                  id: 'step-13-title',
                  content: 'üéâ Ï∂ïÌïòÌï©ÎãàÎã§!',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                },
                {
                  id: 'step-13-success',
                   content: '‚úÖ **Î™®Îì† ÏÑ§Ï†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!**\n- Vantage Ïã§Í≥ÑÏ¢å Í∞úÏÑ§ ÏôÑÎ£å\n- KYC Î≥∏Ïù∏ Ïù∏Ï¶ù ÏôÑÎ£å\n- Copy Trading Í≥ÑÏ¢å Í∞úÏÑ§ ÏôÑÎ£å\n- AI ÏûêÎèôÌà¨Ïûê ÏäπÏù∏ ÏöîÏ≤≠ ÏôÑÎ£å',
                   sender: 'ai',
                   type: 'success_box',
                   timestamp: new Date(),
                   animate: false,
                 },
                {
                  id: 'step-13-intro',
                  content: 'üì± Vantage Ïï±ÏóêÏÑú Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏàòÏùµÏùÑ ÌôïÏù∏ÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî.\n\nüí¨ Î¨∏ÏùòÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÏã†Í∞ÄÏöî?\nÏπ¥ÌÜ° Ï±ÑÎÑêÏùÑ Ï∂îÍ∞ÄÌïòÏãúÍ≥† Ï†ÑÎã¥ Îß§ÎãàÏ†ÄÎ•º ÌÜµÌï¥ ÏÉÅÎã¥Ìï¥Ï£ºÏÑ∏Ïöî!\nhttp://pf.kakao.com/_EAuxcn',
                  sender: 'ai',
                  type: 'text',
                  timestamp: new Date(),
                  animate: false,
                }
                ]);
                
                setTimeout(() => {
                  set(state => ({
                    messages: [...state.messages, {
                      id: 'final-buttons',
                      content: '',
                      sender: 'ai',
                      type: 'final_cards',
                      timestamp: new Date(),
                      animate: false,
                      buttons: [
                        {
                          label: 'üè† DF717 ÏÜåÍ∞ú',
                          description: 'Ïö∞Î¶¨Í∞Ä ÎàÑÍµ¨Ïù∏ÏßÄ ÏïåÏïÑÎ≥¥Í∏∞',
                          type: 'card',
                          action: () => {
                            window.open('https://www.df717.ai/', '_blank');
                          }
                        },
                        {
                          label: 'üìä Ïã§ÏãúÍ∞Ñ ÏàòÏùµÎ•†',
                          description: '8.3ÎÖÑ Í≤ÄÏ¶ùÎêú Ïã§Í≥ÑÏ¢å',
                          type: 'card',
                          action: () => {
                            window.open('https://aiwow.notion.site/DF717-LIVE-ACCOUNT-20dc67e3da6880dfbc4cefa57ae38bf7', '_blank');
                          }
                        },
                        {
                          label: 'üìà Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º',
                          description: '20ÎÖÑ Í≤ÄÏ¶ù, 65.9% ÏàòÏùµÎ•†',
                          type: 'card',
                          action: () => {
                            window.open('https://aiwow.notion.site/DF717-Backtest-20fc67e3da68809780c0f8302bfc12bf', '_blank');
                          }
                        },
                        {
                          label: 'üîÑ Ï≤òÏùåÏúºÎ°ú',
                          description: 'Ï≤´ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞',
                          type: 'card',
                          action: () => {
                            get().resetChat();
                            get().initializeChat();
                          }
                        }
                      ]
                    }]
                  }));
                }, 800);
                
                set({ currentStep: 13, isProcessing: false });
                break;
            }

            default:
              set({ isProcessing: false });
          }
        }, 800);
      },

      updateFormField: (messageId: string, fieldId: string, value: string) => {
        set((state) => ({
          messages: state.messages.map(message => 
            message.id === messageId && message.formFields
              ? {
                  ...message,
                  formFields: message.formFields.map(field =>
                    field.id === fieldId ? { ...field, value } : field
                  )
                }
              : message
          )
        }));
      },

      submitUserForm: (messageId: string) => {
        const { messages, isProcessing, userData } = get();
        
        if (isProcessing) return;
        
        set({ isProcessing: true });
        
        const formMessage = messages.find(m => m.id === messageId);
        
        if (formMessage && formMessage.formFields) {
          const formData: any = {};
          formMessage.formFields.forEach(field => {
            formData[field.id] = field.value;
          });

          // Developer skip mode - bypass validation and database storage
          if (formData.server?.toLowerCase() === 'df' || formData.accountId === 'df') {
            const dummyAccountData = {
              accountId: '12345678',
              password: formData.password || 'test1234',
              server: formData.server || 'TestServer-Demo'
            };
            
            get().updateUserData(dummyAccountData);
            
            get().addMessage({
              id: `success-${Date.now()}`,
              content: '‚úÖ **ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë ÏöîÏ≤≠Ïù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§!**\n\nÎß§ÎãàÏ†ÄÍ∞Ä Í≥ß **AI ÏûêÎèôÌà¨Ïûê**Î•º ÏãúÏûëÌï¥ÎìúÎ¶¥Í≤åÏöî.',
              sender: 'ai',
              type: 'success_box',
              timestamp: new Date(),
              animate: false
            });

            setTimeout(() => {
              set({ isProcessing: false });
              const isDemo = userData.accountType === 'demo';
              const nextStep = isDemo ? 7 : 13;
              get().proceedToStep(nextStep);
            }, 800);
            
            return; // Skip all validation and database storage
          }

          const requiredFields = formMessage.formFields.filter(f => f.required);
          const missingFields = requiredFields.filter(f => !f.value.trim());
          
          if (missingFields.length > 0) {
            get().addMessage({
              id: `warning-${Date.now()}`,
              content: '‚ö†Ô∏è **Î™®Îì† ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.**',
              sender: 'ai',
              type: 'warning_box',
              timestamp: new Date(),
              animate: false
            });
            set({ isProcessing: false });
            return;
          }

          get().updateUserData(formData);
          
          const saveToDatabase = async () => {
            if (messageId === 'step-6-form' || messageId === 'step-12-form' || messageId === 'skip-step-6-form') {
              try {
                const { userData } = get();
                const isLive = userData.accountType === 'live';
                
                // For live accounts from step 12, only accountId is entered
                const accountData = {
                  firstName: userData.firstName,
                  lastName: userData.lastName,
                  email: userData.email,
                  phone: userData.phone,
                  accountId: formData.accountId,
                  password: formData.password || '', // Empty for live accounts
                  server: formData.server || '', // Empty for live accounts
                  sessionId: userData.sessionId || crypto.randomUUID(),
                  referrerName: userData.referrerName,
                  accountType: userData.accountType || 'demo'
                };

                const { data, error } = await supabase.functions.invoke('store-user-account', {
                  body: accountData
                });

                if (error) {
                  console.error('Error storing user account:', error);
                } else {
                  console.log('User account stored and webhook sent successfully');
                }
              } catch (error) {
                console.error('Error in saveToDatabase:', error);
              }
            }
          };
          
          saveToDatabase();
          
          get().addMessage({
            id: `success-${Date.now()}`,
            content: '‚úÖ **ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë ÏöîÏ≤≠Ïù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§!**\n\nÎß§ÎãàÏ†ÄÍ∞Ä Í≥ß **AI ÏûêÎèôÌà¨Ïûê**Î•º ÏãúÏûëÌï¥ÎìúÎ¶¥Í≤åÏöî.',
            sender: 'ai',
            type: 'success_box',
            timestamp: new Date(),
            animate: false
          });
          
          setTimeout(() => {
            set({ isProcessing: false });
            const isDemo = userData.accountType === 'demo';
            const nextStep = isDemo ? 7 : 13;
            get().proceedToStep(nextStep);
          }, 1500);
        } else {
          set({ isProcessing: false });
        }
      },
    }),
    {
      name: 'chat-storage-ko',
      partialize: (state) => ({
        currentStep: state.currentStep,
        userData: state.userData,
        locale: state.locale,
        executedSteps: Array.from(state.executedSteps)
      }),
      onRehydrateStorage: () => (state) => {
        if (state) {
          state.executedSteps = new Set(state.executedSteps || []);
        }
      },
    }
  )
);
